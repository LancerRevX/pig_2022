/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    readonly url?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    readonly user?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    patronymic: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    readonly fullName?: string;
    /**
     * 
     * @type {Date}
     * @memberof Patient
     */
    birthDate: Date;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    gender: number;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    readonly age?: number;
}

/**
 * Check if a given object implements the Patient interface.
 */
export function instanceOfPatient(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "patronymic" in value;
    isInstance = isInstance && "birthDate" in value;
    isInstance = isInstance && "gender" in value;

    return isInstance;
}

export function PatientFromJSON(json: any): Patient {
    return PatientFromJSONTyped(json, false);
}

export function PatientFromJSONTyped(json: any, ignoreDiscriminator: boolean): Patient {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'patronymic': json['patronymic'],
        'fullName': !exists(json, 'full_name') ? undefined : json['full_name'],
        'birthDate': (new Date(json['birth_date'])),
        'gender': json['gender'],
        'age': !exists(json, 'age') ? undefined : json['age'],
    };
}

export function PatientToJSON(value?: Patient | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'first_name': value.firstName,
        'last_name': value.lastName,
        'patronymic': value.patronymic,
        'birth_date': (value.birthDate.toISOString().substr(0,10)),
        'gender': value.gender,
    };
}

