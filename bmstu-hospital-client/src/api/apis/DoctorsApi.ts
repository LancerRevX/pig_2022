/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Doctor,
} from '../models';
import {
    DoctorFromJSON,
    DoctorToJSON,
} from '../models';

export interface DoctorsCreateRequest {
    data: Doctor;
}

export interface DoctorsDeleteRequest {
    id: number;
}

export interface DoctorsListRequest {
    speciality?: string;
    cost?: number;
    user?: string;
    minCost?: number;
    maxCost?: number;
}

export interface DoctorsPartialUpdateRequest {
    id: number;
    data: Doctor;
}

export interface DoctorsReadRequest {
    id: number;
}

export interface DoctorsUpdateRequest {
    id: number;
    data: Doctor;
}

/**
 * 
 */
export class DoctorsApi extends runtime.BaseAPI {

    /**
     */
    async doctorsCreateRaw(requestParameters: DoctorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling doctorsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DoctorToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     */
    async doctorsCreate(requestParameters: DoctorsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.doctorsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async doctorsDeleteRaw(requestParameters: DoctorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling doctorsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async doctorsDelete(requestParameters: DoctorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.doctorsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async doctorsListRaw(requestParameters: DoctorsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Doctor>>> {
        const queryParameters: any = {};

        if (requestParameters.speciality !== undefined) {
            queryParameters['speciality'] = requestParameters.speciality;
        }

        if (requestParameters.cost !== undefined) {
            queryParameters['cost'] = requestParameters.cost;
        }

        if (requestParameters.user !== undefined) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.minCost !== undefined) {
            queryParameters['min_cost'] = requestParameters.minCost;
        }

        if (requestParameters.maxCost !== undefined) {
            queryParameters['max_cost'] = requestParameters.maxCost;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DoctorFromJSON));
    }

    /**
     */
    async doctorsList(requestParameters: DoctorsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Doctor>> {
        const response = await this.doctorsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async doctorsPartialUpdateRaw(requestParameters: DoctorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling doctorsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling doctorsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DoctorToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     */
    async doctorsPartialUpdate(requestParameters: DoctorsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.doctorsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async doctorsReadRaw(requestParameters: DoctorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling doctorsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     */
    async doctorsRead(requestParameters: DoctorsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.doctorsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async doctorsUpdateRaw(requestParameters: DoctorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling doctorsUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling doctorsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/doctors/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DoctorToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     */
    async doctorsUpdate(requestParameters: DoctorsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.doctorsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
