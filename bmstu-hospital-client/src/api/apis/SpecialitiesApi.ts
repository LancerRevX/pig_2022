/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Speciality,
} from '../models';
import {
    SpecialityFromJSON,
    SpecialityToJSON,
} from '../models';

export interface SpecialitiesCreateRequest {
    data: Speciality;
}

export interface SpecialitiesDeleteRequest {
    id: number;
}

export interface SpecialitiesPartialUpdateRequest {
    id: number;
    data: Speciality;
}

export interface SpecialitiesReadRequest {
    id: number;
}

export interface SpecialitiesUpdateRequest {
    id: number;
    data: Speciality;
}

/**
 * 
 */
export class SpecialitiesApi extends runtime.BaseAPI {

    /**
     */
    async specialitiesCreateRaw(requestParameters: SpecialitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Speciality>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling specialitiesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialityToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecialityFromJSON(jsonValue));
    }

    /**
     */
    async specialitiesCreate(requestParameters: SpecialitiesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Speciality> {
        const response = await this.specialitiesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async specialitiesDeleteRaw(requestParameters: SpecialitiesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specialitiesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async specialitiesDelete(requestParameters: SpecialitiesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.specialitiesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async specialitiesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Speciality>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SpecialityFromJSON));
    }

    /**
     */
    async specialitiesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Speciality>> {
        const response = await this.specialitiesListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async specialitiesPartialUpdateRaw(requestParameters: SpecialitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Speciality>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specialitiesPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling specialitiesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialityToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecialityFromJSON(jsonValue));
    }

    /**
     */
    async specialitiesPartialUpdate(requestParameters: SpecialitiesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Speciality> {
        const response = await this.specialitiesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async specialitiesReadRaw(requestParameters: SpecialitiesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Speciality>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specialitiesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecialityFromJSON(jsonValue));
    }

    /**
     */
    async specialitiesRead(requestParameters: SpecialitiesReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Speciality> {
        const response = await this.specialitiesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async specialitiesUpdateRaw(requestParameters: SpecialitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Speciality>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling specialitiesUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling specialitiesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/specialities/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SpecialityToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SpecialityFromJSON(jsonValue));
    }

    /**
     */
    async specialitiesUpdate(requestParameters: SpecialitiesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Speciality> {
        const response = await this.specialitiesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
