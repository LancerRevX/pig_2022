/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Appointment,
} from '../models';
import {
    AppointmentFromJSON,
    AppointmentToJSON,
} from '../models';

export interface AppointmentsCreateRequest {
    data: Appointment;
}

export interface AppointmentsDeleteRequest {
    id: number;
}

export interface AppointmentsListRequest {
    datetime?: string;
    status?: string;
    patient?: string;
    doctor?: string;
    datetimeAfter?: string;
    datetimeBefore?: string;
}

export interface AppointmentsPartialUpdateRequest {
    id: number;
    data: Appointment;
}

export interface AppointmentsReadRequest {
    id: number;
}

export interface AppointmentsUpdateRequest {
    id: number;
    data: Appointment;
}

/**
 * 
 */
export class AppointmentsApi extends runtime.BaseAPI {

    /**
     */
    async appointmentsCreateRaw(requestParameters: AppointmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling appointmentsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     */
    async appointmentsCreate(requestParameters: AppointmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.appointmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appointmentsDeleteRaw(requestParameters: AppointmentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appointmentsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appointmentsDelete(requestParameters: AppointmentsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appointmentsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async appointmentsListRaw(requestParameters: AppointmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Appointment>>> {
        const queryParameters: any = {};

        if (requestParameters.datetime !== undefined) {
            queryParameters['datetime'] = requestParameters.datetime;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.patient !== undefined) {
            queryParameters['patient'] = requestParameters.patient;
        }

        if (requestParameters.doctor !== undefined) {
            queryParameters['doctor'] = requestParameters.doctor;
        }

        if (requestParameters.datetimeAfter !== undefined) {
            queryParameters['datetime_after'] = requestParameters.datetimeAfter;
        }

        if (requestParameters.datetimeBefore !== undefined) {
            queryParameters['datetime_before'] = requestParameters.datetimeBefore;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppointmentFromJSON));
    }

    /**
     */
    async appointmentsList(requestParameters: AppointmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Appointment>> {
        const response = await this.appointmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appointmentsPartialUpdateRaw(requestParameters: AppointmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appointmentsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling appointmentsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     */
    async appointmentsPartialUpdate(requestParameters: AppointmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.appointmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appointmentsReadRaw(requestParameters: AppointmentsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appointmentsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     */
    async appointmentsRead(requestParameters: AppointmentsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.appointmentsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async appointmentsUpdateRaw(requestParameters: AppointmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Appointment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appointmentsUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling appointmentsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/appointments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentToJSON(requestParameters.data),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentFromJSON(jsonValue));
    }

    /**
     */
    async appointmentsUpdate(requestParameters: AppointmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Appointment> {
        const response = await this.appointmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
